require 'pp'

# sleep 3

VERBOSE = ARGV.delete('-v')

Cell = Struct.new(:x,:y,:occ,:next_state){
  def calc_next_state
    if occ == '.'
      if cells_that_matter.select{|c| c.occ == '|'}.count >= 3
        self.next_state = "|"
      else
        self.next_state = '.'
      end
    elsif occ == '|'
      if cells_that_matter.select{|c| c.occ == '#'}.count >= 3
        self.next_state = "#"
      else
        self.next_state = '|'
      end
    elsif occ == '#'
      if cells_that_matter.select{|c| c.occ == '#'}.count >= 1 && cells_that_matter.select{|c| c.occ == '|'}.count >= 1
        self.next_state = "#"
      else
        self.next_state = '.'
      end
    end
  end
  def apply_next_state
    self.occ = self.next_state
    self.next_state = nil
  end
  def cells_that_matter
    (y-1..y+1).map{|y| y >= 0 && (x-1..x+1).map{|x| x >= 0 && GRID[y] && GRID[y][x]}}.flatten.reject{|f|!f}.reject{|f|f==self}
  end
}

TESTDATA = <<TEST.freeze
.#.#...|#.
.....#|##|
.|..|...#.
..|#.....#
#.#|||#|#|
...#.||...
.|....|...
||...#|.#|
|.||||..|.
...#.|..|.
TEST

GRID=[]

(ARGV.include?('-t') ? TESTDATA : ARGV.empty? ? DATA : ARGF).each_line.map do |line|
  GRID<<line.strip.split("").map{|c| Cell.new(nil,nil,c)}
end
GRID.map.with_index{|r,y| r.map.with_index{|c,x| c.x=x; c.y=y;}}

def print_grid
  puts GRID.map{|r| r.map(&:occ).join}.join("\n")
  puts "\n\n" + "*"*GRID.first.length + "\n\n"
end

print_grid

@last = 0

@last_rounds = []
@six_hundredth = nil
@repeat = []

def go_a_round(i,speak)
  GRID.flatten.map(&:calc_next_state)
  GRID.flatten.map(&:apply_next_state)
  print_grid if speak
  pp i
  # sleep 0.5 if speak
  # res = GRID.flatten.select{|c| c.occ == '#'}.count * GRID.flatten.select{|c| c.occ == '|'}.count
  # if @last_rounds.select{|r| r==res}.count == 4
  #   @six_hundredth = @last_rounds[0]
  #   @repeat = @last_rounds
  #   pp i
  #   pp @repeat
  #   return true
  # end
  # if i > 600
  #   @last_rounds << res
  # end
  false
end


7000.times do |i|
  @exit = go_a_round(i,true)
  break if @exit
end

repeat = [229680,
 226135,
 227160,
 225164,
 224237,
 215380,
 210000,
 205114,
 204336,
 196350,
 198990,
 197208,
 200772,
 199398,
 202124,
 198660,
 202070,
 200690,
 206581,
 206746,
 213624,
 214375,
 218544,
 217408,
 222534,
 222662,
 226914,
 226914]
MINS = 1_000_000_000 - 600
puts @repeat[MINS.divmod(@repeat.length)[1]-1]

__END__
....#......|.#........###|...||.#|||.||.|...|.#.|.
|#|#....|#...||.|#.#|.|.|..#...||.#|#.|.#||#||.|#.
.....##...#..###..##.|.|....|..#.|...#.#.....|.|..
|....#|||#..||##....||#||.|..|...|..#....#|#....|#
|......|......|.#...|.....|..|.#...#.#..#|.....#|.
|#...#....#...#.|..#..|...|#..|.#.......#..#....|#
....|#.|#...........##...||......##...||#...#..|.|
.#.....|..|...|#..##||..#.#...#...#|.#...#.|....#.
.##|.....|||.....||.#...#...#...#......##...||#...
.||#.|#..|.....#.|.|..........|.#..|##...||...|#..
|......|..#...#.##||..||..#.|..|.|....##|..|..|.|.
|#...####.#.|.....|#..#....|#.#..|.#.#|####.#..|..
.#|.....#.|....|###..#||...#|...||.|.#|#.....|##..
#.|..#|..#...||#.#|...#.##|..|..#...|#.....|..#|..
#.|.....##..||##....|..|.|.|..##.#..|||.....|.....
......##|..|#.|#||...#.|..#..|.#....|..#....#..|##
|........|#.#.|.##...#|..|##.....|##.|.#....#.#...
#.#..#..|.........#|.##.......|...|.#..#.#|####.#.
.....#||#..|......#|.....#..|||..##.......#.#..#.#
#...........#|..#..|.||.|||.|....#||....|#..##.#..
.|...#..##|#...#.||.|##.|..#.||.#.#.#.###...#...#|
|#|...|.......#..#..#....|.###..|.||...|.#...|....
..#.#......|..|.||#.||.......|..#|.#.|..|.#..#.#.#
#..#...|...|..|..#....|..|...|#|...#......#...#...
|...|.|.||#...|...|....|...#.|.#.|.|.|#..|..###.#.
..|.|.....|##...##....|..|.....||...#..||##......|
.#.#....|.##|....|.|..|.|##..#...|##|.#.#.##|....#
..#|.|.....|.#....|...||....|.#..|#.#.|#|.||.||...
.|##.|.#|#|...|...##.||.....|.#|....|.....|#..||..
|.#|...||....#|..#...|.....|.....#|...|#.#|..|....
.|...|....###.|....||##||..|#||.#|##|..|.#.......|
...#.||###|#|.#.|...#...|.##.|.||#..#.......||.#.#
.#|....|#.|.###.##|...|#...#.||..##...#.#|##...#.#
..|#|#..#..#..#|#.....|.#.|...|..#.#......###..|.|
#.|.|..#.#.#.#.....|........|#.||..#......#|.....#
...#.#|#|.|.###|#...#.|......#|.......##||......#.
.#|#.|#..#|...|.|...##|.#....|#........|..|.#.#.#.
..|.##.|#..|...#|.#...#........|.|#|.#.|.|..|#|.#.
...#.#.#||.|||...|#||..##.....###......#..#|||#..#
...#.....#||##.|..#.#|......||..#..#..#..|..|..|..
####.|....|.......|.|.#...|...#.#.......|.|.#...||
..|.|#|.#..##..##...#.....|...|...#|.|...#|..#..##
|...##.#|.........#..||#..||.#....||#..|..||....#|
.#..........#|#.#|#.|...|#....|..|...|...##....|#.
|.|#..|..|......#..|...|..##|||#...|..##|...#.|#..
||#.||.#|.|...#.........#...|.|##.#.|#||.|.#|..#..
|..|..|..#....#...|.......#|.........|#....#|....|
##..###......#|.........|.......|...||.......#|..#
|..............#.......#...#|.|||..#..|..#........
...|||.#.|.#.|..#.....##|....###.#.|....|.......|.
